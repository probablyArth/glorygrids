generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  grids         Grid[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, token])
}

model Grid {
  id String @id @default(cuid())

  slug String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name          String
  header_title  String
  customMessage String @db.Text

  icon             Photo?            @relation(fields: [iconId], references: [id])
  iconId           String?           @unique
  questions        Questions[]
  textTestimonials TextTestimonial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Questions {
  id      String @id @default(cuid())
  content String
  grid    Grid   @relation(fields: [gridId], references: [id], onDelete: Cascade)
  gridId  String
  index   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TextTestimonial {
  id String @id @default(cuid())

  liked Boolean @default(false)

  gridId String
  grid   Grid   @relation(fields: [gridId], references: [id], onDelete: Cascade)

  name             String
  email            String
  rating           Int
  hasPublicConsent Boolean
  content          String  @db.Text

  avatar   Photo?  @relation(fields: [avatarId], references: [id])
  avatarId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id              String            @id @default(cuid())
  path            String
  grid            Grid?
  TextTestimonial TextTestimonial[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
